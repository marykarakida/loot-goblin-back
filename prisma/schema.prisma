// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  username  String      @unique
  password  String
  picture   String
  Session   Session[]
  Character Character[]

  @@map("users")
}

model Session {
  id           String @id @default(uuid())
  userId       String
  User         User   @relation(fields: [userId], references: [id])
  refreshToken String @unique

  @@map("sessions")
}

model Class {
  id         String      @id @default(uuid())
  name       String      @unique
  icon       String
  characters Character[]

  @@map("classes")
}

model Race {
  id    String      @id @default(uuid())
  name  String      @unique
  races Character[]

  @@map("races")
}

model Category {
  id         String      @id @default(uuid())
  name       String      @unique
  icon       String
  equipments Equipment[]

  @@map("categories")
}

model Equipment {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  picture               String
  category              Category                @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  categoryName          String
  EquipmentsOnInventory EquipmentsOnInventory[]

  @@map("equipments")
}

model Character {
  id        String     @id @default(uuid())
  name      String
  picture   String?
  race      Race       @relation(fields: [raceId], references: [id])
  raceId    String
  class     Class      @relation(fields: [classId], references: [id])
  classId   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  Inventory Inventory?

  @@map("characters")
}

model Inventory {
  id                    String                  @id @default(uuid())
  character             Character               @relation(fields: [characterId], references: [id])
  characterId           String                  @unique
  EquipmentsOnInventory EquipmentsOnInventory[]

  @@map("inventories")
}

model EquipmentsOnInventory {
  id          String          @id @default(uuid())
  inventory   Inventory       @relation(fields: [inventoryId], references: [id])
  inventoryId String
  equipment   Equipment       @relation(fields: [equipmentId], references: [id])
  equipmentId String
  position    Int
  quantity    Int
  status      EquipmentStatus

  @@unique([inventoryId, equipmentId])
  @@map("equipmentsOnInventory")
}

enum EquipmentStatus {
  new
  viewed
}
